#!/bin/bash

# Alias for extended git cleanup
if [[ -z $(git config --global alias.cleanup) ]] then;
    echo 'setting `git alias.cleanup` for cleaning up unreacheable branches in origin remote';
    git config --global alias.cleanup '!git remote prune origin && git branch -vv | grep origin | grep gone | awk '"'"'{print $1}'"'"' | xargs -L 1 git branch -df';
fi;

# Alias for extended git rebase-latest
if [[ -z $(git config --global alias.rebase-latest) ]] then;
    echo 'setting `git alias.rebase-latest` for rebase w/ any branch';
    git config --global alias.rebase-latest '!f() { branch=${1:-master}; current=$(git rev-parse --abbrev-ref HEAD); if [ "$current" = "$branch" ]; then echo "Already on $branch branch. No need to rebase."; exit 0; fi; git checkout $branch && git pull && git checkout $current && git rebase $branch; }; f';
fi

# Alias for extended git merge-latest
if [[ -z $(git config --global alias.merge-latest) ]] then;
    echo 'setting `git alias.merge-latest` for merge w/ any branch';
    git config --global alias.merge-latest '!f() { branch=${1:-master}; current=$(git rev-parse --abbrev-ref HEAD); if [ "$current" = "$branch" ]; then echo "Already on $branch branch. No need to merge."; exit 0; fi; git checkout $branch && git pull && git checkout $current && git merge $branch; }; f';
fi;

# Alias for extended git log
if [[ -z $(git config --global alias.xlog) ]] then;
    echo 'setting `git alias.xlog` for extended log';
    git config --global alias.xlog 'log --all --decorate --oneline --graph';
fi;

# Alias for first push upstream
if [[ -z $(git config --global alias.upush) ]] then;
    echo 'setting `git alias.upush` for upstream push into origin';
    git config --global alias.upush '!git push --set-upstream origin $(git rev-parse --abbrev-ref HEAD)'
fi;